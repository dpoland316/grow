#include "Arduino.h"
#include "string.h"
#include "ProcessScheduler.h"
#include "DHT.h"
#include "ESP8266WiFi.h"
#include "PubSubClient.h"

// Define Wifi/Server credentials
const char* ssid = "Sapphire";
const char* password =  "0102030405";

// MQTT credentials
const char* mqttServer = "m20.cloudmqtt.com";
const int 	mqttPort = 14273;
const char* mqttUser = "qzznwlks";
const char* mqttPassword = "bBw0jh6X3SPR";
const char* temp_Q = "grow/Temperature";
const char* humidity_Q = "grow/Humidity";
const char* light_Q = "grow/Light";

// Wifi/MQTT Clients
WiFiClient espClient;
PubSubClient client(espClient);

// Define pins
#define RED 	12
#define YELLOW 	14
#define GREEN 	5
#define LDR 	0 		// A0 Light Dependant Resistor
#define DHTPIN 	13		// Temp and Humidity
#define DHTTYPE	DHT22

// Define DHT22 Sensor
DHT dht(DHTPIN, DHTTYPE);

// Define Async Processes
class BlinkProcess: public Process {
public:
	// Call the Process constructor
	BlinkProcess(Scheduler &manager, ProcPriority pr, unsigned int period,
			int pin) :
			Process(manager, pr, period) {
		_pinState = LOW; // Set the default state
		_pin = pin; // Store the pin number
	}

protected:
	//setup the pins
	virtual void setup() {
		pinMode(_pin, OUTPUT);
		_pinState = LOW;
		digitalWrite(_pin, _pinState);
	}

	//LEDs should be off when disabled
	virtual void onDisable() {
		_pinState = LOW;
		digitalWrite(_pin, _pinState);
	}

	//Start the LEDs on
	virtual void onEnable() {
		_pinState = HIGH;
		digitalWrite(_pin, _pinState);
	}

	// Create our service routine
	virtual void service() {
		// If pin is on turn it off, otherwise turn it on
		_pinState = !_pinState;
		digitalWrite(_pin, _pinState);
	}

private:
	bool _pinState; //the Current state of the pin
	int _pin; // The pin the LED is on
};
class TempAndHumidityProcess: public Process {
public:
	// Call the Process constructor
	TempAndHumidityProcess(Scheduler &manager, ProcPriority pr,
			unsigned int period) :
			Process(manager, pr, period) {
	}

protected:
	virtual void service() {
		//delay(2000);

		humidity = dht.readHumidity();
		temperature = dht.readTemperature();

		//Print temp and humidity values to serial monitor
		Serial.print("Humidity: ");
		Serial.print(humidity);
		Serial.print(" %, Temp: ");
		Serial.print(temperature);
		Serial.println(" Celsius");

		String tempString = String(temperature, 2) + " Celsius";
		String humidityString = String(humidity, 2) + "%";

		client.publish(temp_Q, tempString.c_str());
		client.publish(humidity_Q, humidityString.c_str());
	}

private:
	float humidity;
	float temperature;
};
class LightProcess: public Process {
public:
	// Call the Process constructor
	LightProcess(Scheduler &manager, ProcPriority pr,
			unsigned int period, int pin) :
			Process(manager, pr, period) {
		_pin = pin; // Store the pin number
	}

protected:
	//setup the pins
	virtual void setup() {
		pinMode(_pin, INPUT);
	}

	// Create our service routine
	virtual void service() {
		int sensorValue = analogRead(_pin);   // read the input on analog pin

		float voltage = sensorValue * (3.3 / 1023.0); // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V)
		Serial.print("Light Measurement: ");
		Serial.print(sensorValue);

		Serial.print(", ");
		Serial.print(voltage);
		Serial.print(" volts");

		// Sensor shows 525 when it's dark, so calibrate for that
		float percentage = (sensorValue / 1023.0) * 100.0;
		Serial.print(", ");
		Serial.print(percentage);
		Serial.print("%");

		if (percentage > 80.0) {
			Serial.println(" -- its bright!");
		} else if (percentage > 40.0) {
			Serial.println(" -- its manageable");
		} else {
			Serial.println(" -- it's dark! Turn on some lights!");
		}

		String lightString = String(percentage, 2) + "%";
		client.publish(light_Q, lightString.c_str());
	}
private:
	int _pin; // The pin the LED is on
};


Scheduler sched; // Create a global Scheduler object

// Create our blink processes
BlinkProcess blink1(sched, HIGH_PRIORITY, random(50,1000), RED); // Blink every 250 ms
BlinkProcess blink2(sched, HIGH_PRIORITY, random(50,1000), YELLOW); // Blink every 500 ms
BlinkProcess blink3(sched, HIGH_PRIORITY, random(50,1000), GREEN); // Blink every 1000 ms
TempAndHumidityProcess readTemp(sched, HIGH_PRIORITY, 2000);
LightProcess readLight(sched, HIGH_PRIORITY, 1000, LDR);

void callback(const char* topic, byte* payload, unsigned int length)
{
	/* MQTT callback service
	 * Placed before setup loop so it can be registered at initialization time.
	 */

	Serial.print("MQTT Message arrived in topic: ");
	Serial.println(topic);

	Serial.print("Message:");
	for (int i = 0; i < length; i++) {
		Serial.print((char)payload[i]);
	}

	Serial.println();
	Serial.println("-----------------------");

}

void setup()
{
	Serial.begin(115200);

	// Connect to WiFi
	WiFi.begin(ssid, password);
	Serial.print("Connecting to WiFi..");
	while (WiFi.status() != WL_CONNECTED) {
		Serial.print(".");
	delay(500);
	}
	Serial.println();

	Serial.println("Connected to the WiFi network");

	// Configure MQTT server/client and callback
	client.setServer(mqttServer, mqttPort);
	client.setCallback(callback);

	//Establish connection to MQTT Server
	while (!client.connected()) {
	    Serial.println("Connecting to MQTT...");

	    if (client.connect("ESP8266Client", mqttUser, mqttPassword )) {
	      Serial.println("connected");
	    } else {
	      Serial.print("failed with state ");
	      Serial.print(client.state());
	      delay(2000);
	    }
	}

	client.subscribe("esp/commands");
	client.subscribe("esp/logger");
	//client.publish("esp/test", "Hello from ESP8266");


	// Start DHT sensor
	dht.begin();


	blink1.add(true);
	blink2.add(true);
	blink3.add(true);
	readTemp.add(true);
	readLight.add(true);
}

// The loop function is called in an endless loop
void loop()
{

sched.run();
client.loop();

}



